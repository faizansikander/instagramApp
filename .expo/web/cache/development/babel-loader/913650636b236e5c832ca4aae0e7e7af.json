{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, CLEAR_DATA } from \"../constants/index\";\nimport firebase from \"firebase\";\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      console.log(\"Snapshot variable\", snapshot);\n\n      if (snapshot.exists) {\n        console.log(\"Now Snapshot Exists\", snapshot.data());\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log(\"document does not exist\");\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      console.log(\"Show Posts\", posts);\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      console.log(\"following\", following);\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i], true));\n      }\n\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        console.log(\"Snapshot variale\", snapshot);\n\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          console.log(\"User\", user);\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {\n          console.log(\"document does not exist\");\n        }\n      });\n\n      if (getPosts) {\n        console.log(\"get posts\", getPosts);\n        dispatch(fetchUserFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUserFollowingPosts(uid) {\n  console.log(\"fetchUserFollowingPosts\");\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n      console.log(\"posts122212\", posts);\n\n      for (var i = 0; i < posts.length; i++) {\n        dispatch(fetchUsersFollowingLikes(uid, posts[i].id));\n      }\n\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}\nexport function fetchUsersFollowingLikes(uid, postId) {\n  var cntr = 0;\n  console.log('Fetch User Execution Cnt', cntr + 1);\n  return function (dispatch, getState) {\n    var listener = firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").doc(postId).collection(\"likes\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot) {\n      var postId = snapshot.id;\n      var currentUserLike = false;\n\n      if (snapshot.exists) {\n        currentUserLike = true;\n      }\n\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/tayyaba/Desktop/zenkoders/Faizan/Instagram/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","USERS_LIKES_STATE_CHANGE","CLEAR_DATA","firebase","clearData","dispatch","type","fetchUser","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","console","log","exists","data","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollowing","onSnapshot","following","i","length","fetchUsersData","getPosts","getState","found","usersState","users","some","el","user","fetchUserFollowingPosts","find","fetchUsersFollowingLikes","postId","cntr","listener","currentUserLike"],"mappings":"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","sourcesContent":["import {\n  USER_STATE_CHANGE,\n  USER_POSTS_STATE_CHANGE,\n  USER_FOLLOWING_STATE_CHANGE,\n  USERS_DATA_STATE_CHANGE,\n  USERS_POSTS_STATE_CHANGE,\n  USERS_LIKES_STATE_CHANGE,\n  CLEAR_DATA,\n} from \"../constants/index\";\nimport firebase from \"firebase\";\n\nexport function clearData() {\n  return (dispatch) => {\n    dispatch({ type: CLEAR_DATA });\n  };\n}\n\nexport function fetchUser() {\n  return (dispatch) => {\n    firebase\n      .firestore()\n      .collection(\"users\")\n      .doc(firebase.auth().currentUser.uid)\n      .get()\n      .then((snapshot) => {\n        //    alert(firebase.auth().currentUser.uid);\n        console.log(\"Snapshot variable\", snapshot);\n        if (snapshot.exists) {\n          console.log(\"Now Snapshot Exists\", snapshot.data());\n          dispatch({ type: USER_STATE_CHANGE, currentUser: snapshot.data() });\n        } else {\n          console.log(\"document does not exist\");\n        }\n      });\n  };\n}\n//---\n\nexport function fetchUserPosts() {\n  return (dispatch) => {\n    firebase\n      .firestore()\n      .collection(\"posts\")\n      .doc(firebase.auth().currentUser.uid)\n      .collection(\"userPosts\")\n      .orderBy(\"creation\", \"asc\")\n      .get()\n      .then((snapshot) => {\n        let posts = snapshot.docs.map((doc) => {\n          const data = doc.data();\n          const id = doc.id;\n\n          return { id, ...data };\n        });\n        console.log(\"Show Posts\", posts);\n        dispatch({ type: USER_POSTS_STATE_CHANGE, posts });\n      });\n  };\n}\n\nexport function fetchUserFollowing() {\n  return (dispatch) => {\n    firebase\n      .firestore()\n      .collection(\"following\")\n      .doc(firebase.auth().currentUser.uid)\n      .collection(\"userFollowing\")\n\n      .onSnapshot((snapshot) => {\n        let following = snapshot.docs.map((doc) => {\n          const id = doc.id;\n\n          return id;\n        });\n\n        console.log(\"following\", following);\n        for (var i = 0; i < following.length; i++) {\n          dispatch(fetchUsersData(following[i], true));\n        }\n        dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following });\n      });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return (dispatch, getState) => {\n    const found = getState().usersState.users.some((el) => el.uid === uid);\n\n    if (!found) {\n      firebase\n        .firestore()\n        .collection(\"users\")\n        .doc(uid)\n        .get()\n        .then((snapshot) => {\n          //    alert(firebase.auth().currentUser.uid);\n          console.log(\"Snapshot variale\", snapshot);\n          if (snapshot.exists) {\n            let user = snapshot.data();\n            console.log(\"User\", user);\n            user.uid = snapshot.id;\n            dispatch({ type: USERS_DATA_STATE_CHANGE, user });\n          } else {\n            console.log(\"document does not exist\");\n          }\n        });\n      if (getPosts) {\n        console.log(\"get posts\",getPosts)\n        dispatch(fetchUserFollowingPosts(uid));\n      }\n    }\n  };\n}\n\n// export function fetchUserFollowingPosts(uid) {\n//   return (dispatch, getState) => {\n//     firebase\n//       .firestore()\n//       .collection(\"posts\")\n//       .doc(uid)\n//       .collection(\"userPosts\")\n//       .orderBy(\"creation\", \"asc\")\n//       .get()\n//       .then((snapshot) => {\n//         /* const uid =snapshot.query.EP.path.segments[1];\n//          const uid = snapshot.docs[0].ref.path.split('/')[1];\n//          */\n\n//         //console.log(\"uid segment\",uid)\n//         //console.log(\"Snapshot1\",snapshot)\n//          const user = getState().usersState.users.find(el => el.uid === uid) ;\n\n//         let posts = snapshot.docs.map((doc) => {\n//           const data = doc.data();\n//           const id = doc.id;\n\n//           return { id, ...data, user };\n//         });\n//                        console.log('Show Posts1111    ', posts)\n//                        if(posts.length>0){\n//                         for (let i = 0; i < posts.length; i++) {\n//                           dispatch(fetchUserFollowingLikes(uid, posts[i].id));\n//                         }\n                \n//                         dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid });\n                  \n//                        }\n      \n//         console.log(\"getstate\", getState());\n//       });\n//   };\n// }\n\n// export function fetchUserFollowingLikes(uid, postId) {\n//   return (dispatch, getState) => {\n//     firebase\n//       .firestore()\n//       .collection(\"posts\")\n//       .doc(uid)\n//       .collection(\"userPosts\")\n//       .doc(postId)\n//       .collection(\"likes\")\n//       .doc(firebase.auth().currentUser.uid)\n//       .onSnapshot((snapshot) => {\n//         // const user = getState().usersState.users.find(el => el.uid === uid) ;\n\n//      //   const postId = snapshot.ZE.path.segments[3];\n\n//         console.log(\"Index JS -----\", postId);\n\n//         let currentUserLike = false;\n\n//         if (snapshot.exists) {\n//           currentUserLike = true;\n//         }\n\n//         dispatch({ type: USERS_LIKES_STATE_CHANGE, postId, currentUserLike });\n\n//         console.log(\"getstate\", getState());\n//       });\n//   };\n// }\n\n\n\nexport function fetchUserFollowingPosts(uid) {\n  console.log(\"fetchUserFollowingPosts\")\n  return ((dispatch, getState) => {\n      firebase.firestore()\n          .collection(\"posts\")\n          .doc(uid)\n          .collection(\"userPosts\")\n          .orderBy(\"creation\", \"asc\")\n          .get()\n          .then((snapshot) => {\n            // const uid =snapshot.query.EP.path.segments[1];\n              // const uid = snapshot.docs[0].ref.path.split('/')[1];\n              const user = getState().usersState.users.find(el => el.uid === uid);\n\n\n              let posts = snapshot.docs.map(doc => {\n                  const data = doc.data();\n                  const id = doc.id;\n                  return { id, ...data, user }\n              })\n              // if(posts.length>0){\n                console.log(\"posts122212\",posts)\n                for (let i = 0; i < posts.length; i++) {\n                    dispatch(fetchUsersFollowingLikes(uid, posts[i].id))\n                }\n                dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid })\n              // }\n           \n\n          })\n  })\n}\n\nexport function fetchUsersFollowingLikes(uid, postId) {\n  let cntr = 0;\n  console.log('Fetch User Execution Cnt',cntr+1);\n  return ((dispatch, getState) => {\n      let listener = firebase.firestore()\n          .collection(\"posts\")\n          .doc(uid)\n          .collection(\"userPosts\")\n          .doc(postId)\n          .collection(\"likes\")\n          .doc(firebase.auth().currentUser.uid)\n          .onSnapshot((snapshot) => {\n              const postId = snapshot.id;\n\n              let currentUserLike = false;\n              if (snapshot.exists) {\n                  currentUserLike = true;\n              }\n\n              dispatch({ type: USERS_LIKES_STATE_CHANGE, postId, currentUserLike })\n          })\n\n  })\n}\n"]},"metadata":{},"sourceType":"module"}