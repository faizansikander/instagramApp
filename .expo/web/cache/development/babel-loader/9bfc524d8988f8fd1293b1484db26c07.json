{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { createMaterialBottomTabNavigator } from \"@react-navigation/material-bottom-tabs\";\nimport firebase from \"firebase\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { fetchUser, fetchUserPosts, fetchUserFollowing, clearData } from \"../redux/actions/index\";\nimport ProfileScreen from \"./main/Profile\";\nimport FeedScreen from \"./main/Feed\";\nimport SearchScreen from \"./main/Search\";\nvar Tab = createMaterialBottomTabNavigator();\n\nvar EmptyScreen = function EmptyScreen() {\n  return null;\n};\n\nexport var Main = function (_Component) {\n  _inherits(Main, _Component);\n\n  var _super = _createSuper(Main);\n\n  function Main() {\n    _classCallCheck(this, Main);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Main, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.clearData();\n      this.props.fetchUser();\n      this.props.fetchUserPosts();\n      this.props.fetchUserFollowing();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Tab.Navigator, {\n        initialRouteName: \"Feed\",\n        labeled: false\n      }, React.createElement(Tab.Screen, {\n        name: \"Feed\",\n        component: FeedScreen,\n        options: {\n          tabBarIcon: function tabBarIcon(_ref) {\n            var color = _ref.color,\n                size = _ref.size;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"home1\",\n              color: color,\n              size: 26\n            });\n          }\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"Search\",\n        component: SearchScreen,\n        navigation: this.props.navigation,\n        options: {\n          tabBarIcon: function tabBarIcon(_ref2) {\n            var color = _ref2.color,\n                size = _ref2.size;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"magnify\",\n              color: color,\n              size: 26\n            });\n          }\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"AddContainer\",\n        component: EmptyScreen,\n        listeners: function listeners(_ref3) {\n          var navigation = _ref3.navigation;\n          return {\n            tabPress: function tabPress(event) {\n              event.preventDefault();\n              navigation.navigate(\"Add\");\n            }\n          };\n        },\n        options: {\n          tabBarIcon: function tabBarIcon(_ref4) {\n            var color = _ref4.color,\n                size = _ref4.size;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"plus-box\",\n              color: color,\n              size: 26\n            });\n          }\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"Profile\",\n        component: ProfileScreen,\n        listeners: function listeners(_ref5) {\n          var navigation = _ref5.navigation;\n          return {\n            tabPress: function tabPress(event) {\n              event.preventDefault();\n              navigation.navigate(\"Profile\", {\n                uid: firebase.auth().currentUser.uid\n              });\n            }\n          };\n        },\n        options: {\n          tabBarIcon: function tabBarIcon(_ref6) {\n            var color = _ref6.color,\n                size = _ref6.size;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"account-circle\",\n              color: color,\n              size: 26\n            });\n          }\n        }\n      }));\n    }\n  }]);\n\n  return Main;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser,\n    users: store.usersState.users\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUser: fetchUser,\n    fetchUserPosts: fetchUserPosts,\n    fetchUserFollowing: fetchUserFollowing,\n    clearData: clearData\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(Main);","map":{"version":3,"sources":["/Users/tayyaba/Desktop/zenkoders/Faizan/Instagram/components/Main.js"],"names":["React","Component","MaterialCommunityIcons","createMaterialBottomTabNavigator","firebase","connect","bindActionCreators","fetchUser","fetchUserPosts","fetchUserFollowing","clearData","ProfileScreen","FeedScreen","SearchScreen","Tab","EmptyScreen","Main","props","tabBarIcon","color","size","navigation","tabPress","event","preventDefault","navigate","uid","auth","currentUser","mapStateToProps","store","userState","users","usersState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport MaterialCommunityIcons from \"react-native-vector-icons/MaterialCommunityIcons\";\n\nimport { createMaterialBottomTabNavigator } from \"@react-navigation/material-bottom-tabs\";\n\nimport firebase from \"firebase\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport {\n  fetchUser,\n  fetchUserPosts,\n  fetchUserFollowing,\n  clearData,\n} from \"../redux/actions/index\";\nimport ProfileScreen from \"./main/Profile\";\nimport FeedScreen from \"./main/Feed\";\nimport SearchScreen from \"./main/Search\";\n\nconst Tab = createMaterialBottomTabNavigator();\n\nconst EmptyScreen = () => {\n  return null;\n};\n\nexport class Main extends Component {\n  componentDidMount() {\n    this.props.clearData();\n    this.props.fetchUser();\n    this.props.fetchUserPosts();\n    this.props.fetchUserFollowing();\n  }\n\n  render() {\n    //console.log(\"users following data\",this.props.users)\n\n    return (\n      <Tab.Navigator initialRouteName=\"Feed\" labeled={false}>\n        <Tab.Screen\n          name=\"Feed\"\n          component={FeedScreen}\n          options={{\n            tabBarIcon: ({ color, size }) => (\n              <MaterialCommunityIcons name=\"home1\" color={color} size={26} />\n            ),\n          }}\n        />\n\n        <Tab.Screen\n          name=\"Search\"\n          component={SearchScreen}\n          navigation={this.props.navigation}\n          options={{\n            tabBarIcon: ({ color, size }) => (\n              <MaterialCommunityIcons name=\"magnify\" color={color} size={26} />\n            ),\n          }}\n        />\n\n        <Tab.Screen\n          name=\"AddContainer\"\n          component={EmptyScreen}\n          listeners={({ navigation }) => ({\n            tabPress: (event) => {\n              event.preventDefault();\n              navigation.navigate(\"Add\");\n            },\n          })}\n          options={{\n            tabBarIcon: ({ color, size }) => (\n              <MaterialCommunityIcons name=\"plus-box\" color={color} size={26} />\n            ),\n          }}\n        />\n\n        <Tab.Screen\n          name=\"Profile\"\n          component={ProfileScreen}\n          listeners={({ navigation }) => ({\n            tabPress: (event) => {\n              event.preventDefault();\n              navigation.navigate(\"Profile\", {\n                uid: firebase.auth().currentUser.uid,\n              });\n            },\n          })}\n          options={{\n            tabBarIcon: ({ color, size }) => (\n              <MaterialCommunityIcons\n                name=\"account-circle\"\n                color={color}\n                size={26}\n              />\n            ),\n          }}\n        />\n      </Tab.Navigator>\n    );\n  }\n}\n\nconst mapStateToProps = (store) => ({\n  currentUser: store.userState.currentUser,\n  users: store.usersState.users,\n});\n\nconst mapDispatchProps = (dispatch) =>\n  bindActionCreators(\n    { fetchUser, fetchUserPosts, fetchUserFollowing, clearData },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchProps)(Main);\n"]},"metadata":{},"sourceType":"module"}