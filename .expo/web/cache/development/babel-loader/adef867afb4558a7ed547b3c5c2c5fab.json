{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport firebase from \"firebase\";\n\nrequire(\"firebase/firestore\");\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from \"redux\";\nimport { fetchUsersData } from \"../../redux/actions/index\";\n\nfunction Comment(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      postId = _useState4[0],\n      setPostId = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      text = _useState6[0],\n      setText = _useState6[1];\n\n  useEffect(function () {\n    function matchUserToComment(comments) {\n      var _loop = function _loop(i) {\n        if (comments[i].hasOwnProperty('user')) {\n          return \"continue\";\n        }\n\n        var user = props.users.find(function (x) {\n          return x.uid === comments[i].creator;\n        });\n\n        if (user == undefined) {\n          props.fetchUsersData(comments[i].creator, false);\n        } else {\n          comments[i].user = user;\n        }\n      };\n\n      for (var i = 0; i < comments.length; i++) {\n        var _ret = _loop(i);\n\n        if (_ret === \"continue\") continue;\n      }\n\n      setComments(comments);\n    }\n\n    if (props.route.params.postId !== postId) {\n      firebase.firestore().collection(\"posts\").doc(props.route.params.uid).collection(\"userPosts\").doc(props.route.params.postId).collection(\"comments\").get().then(function (snapshot) {\n        var comments = snapshot.docs.map(function (doc) {\n          var data = doc.data();\n          var id = doc.id;\n          return _objectSpread({\n            id: id\n          }, data);\n        });\n        matchUserToComment(comments);\n      });\n      setPostId(props.route.params.postId);\n    } else {\n      matchUserToComment(comments);\n    }\n  }, [props.route.params.postId, props.users]);\n\n  var onCommentSend = function onCommentSend() {\n    firebase.firestore().collection(\"posts\").doc(props.route.params.uid).collection(\"userPosts\").doc(props.route.params.postId).collection(\"comments\").add({\n      creator: firebase.auth().currentUser.uid,\n      text: text\n    });\n  };\n\n  return React.createElement(View, null, React.createElement(FlatList, {\n    numColumns: 1,\n    horizontal: false,\n    data: comments,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, null, React.createElement(Text, null, item.text));\n    }\n  }), React.createElement(View, null, React.createElement(TextInput, {\n    placeholder: \"comment...\",\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return onCommentSend();\n    },\n    title: \"Send\"\n  })));\n}\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    users: store.usersState.users\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUsersData: fetchUsersData\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(Comment);","map":{"version":3,"sources":["/Users/tayyaba/Desktop/zenkoders/Faizan/Instagram/components/main/Comment.js"],"names":["React","useState","useEffect","firebase","require","connect","bindActionCreators","fetchUsersData","Comment","props","comments","setComments","postId","setPostId","text","setText","matchUserToComment","i","hasOwnProperty","user","users","find","x","uid","creator","undefined","length","route","params","firestore","collection","doc","get","then","snapshot","docs","map","data","id","onCommentSend","add","auth","currentUser","item","mapStateToProps","store","usersState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { View, Text, FlatList, Button, TextInput } from \"react-native\";\n\nimport firebase from \"firebase\";\nrequire(\"firebase/firestore\");\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from \"redux\";\nimport { fetchUsersData } from \"../../redux/actions/index\";\n\n\nfunction Comment(props) {\n  const [comments, setComments] = useState([]);\n  const [postId, setPostId] = useState(\"\");\n  const [text, setText] = useState(\"\");\n\n  useEffect(() => {\n\n\n    function matchUserToComment(comments) {\n\n      for (let i = 0; i < comments.length; i++) {\n\n        if (comments[i].hasOwnProperty('user')) {\n          continue;\n        }\n\n        const user = props.users.find(x => x.uid === comments[i].creator);\n\n        if (user == undefined) {\n\n          props.fetchUsersData(comments[i].creator, false)\n\n\n        } else {\n          comments[i].user = user;\n        }\n      }\n\n      setComments(comments);\n\n\n    }\n\n\n\n\n\n\n    if (props.route.params.postId !== postId) {\n      firebase\n        .firestore()\n        .collection(\"posts\")\n        .doc(props.route.params.uid)\n        .collection(\"userPosts\")\n        .doc(props.route.params.postId)\n        .collection(\"comments\")\n        .get()\n        .then((snapshot) => {\n          let comments = snapshot.docs.map((doc) => {\n            const data = doc.data();\n            const id = doc.id;\n\n            return { id, ...data };\n          });\n          matchUserToComment(comments);\n        });\n      setPostId(props.route.params.postId);\n    } else {\n      matchUserToComment(comments);\n\n    }\n  }, [props.route.params.postId, props.users]);\n\n\n\n  const onCommentSend = () => {\n    firebase\n      .firestore()\n      .collection(\"posts\")\n      .doc(props.route.params.uid)\n      .collection(\"userPosts\")\n      .doc(props.route.params.postId)\n      .collection(\"comments\")\n      .add({\n        creator: firebase.auth().currentUser.uid,\n        text\n      }\n\n      )\n\n  }\n\n  return (\n\n\n    <View>\n      <FlatList\n        numColumns={1}\n        horizontal={false}\n        data={comments}\n        renderItem={({ item }) =>\n          <View>\n            <Text>{item.text}</Text>\n\n          </View>\n        }\n      />\n\n      <View>\n        <TextInput\n          placeholder='comment...'\n          onChangeText={(text) => setText(text)} />\n\n        <Button onPress={() => onCommentSend()}\n          title=\"Send\"\n        />\n\n      </View>\n\n\n\n    </View>\n  )\n}\n\n\n\nconst mapStateToProps = (store) => ({\n\n  users: store.usersState.users,\n});\n\nconst mapDispatchProps = (dispatch) =>\n  bindActionCreators(\n    { fetchUsersData },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchProps)(Comment);"]},"metadata":{},"sourceType":"module"}