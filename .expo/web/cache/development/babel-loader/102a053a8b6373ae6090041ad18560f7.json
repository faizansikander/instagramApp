{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport firebase from 'firebase';\nimport { NavigationContainer } from '@react-navigation/native';\n\nrequire('firebase/firestore');\n\nrequire('firebase/firebase-storage');\n\nexport default function Save(props) {\n  console.log(props.route.params.image);\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      caption = _useState2[0],\n      setCaption = _useState2[1];\n\n  var uploadImage = function uploadImage() {\n    var childPath, uri, response, blob, task, taskProgress, taskCompleted, taskError;\n    return _regeneratorRuntime.async(function uploadImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            childPath = \"post/\" + firebase.auth().currentUser.uid + \"/\" + Math.random().toString(36);\n            console.log(childPath);\n            uri = props.route.params.image;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 8:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childPath).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred: \" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                savePostData(snapshot);\n                console.log('Task Completed ' + snapshot);\n              });\n            };\n\n            taskError = function taskError(snapshot) {\n              console.log('Task Error is Running');\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var savePostData = function savePostData(downloadURL) {\n    firebase.firestore().collection('posts').doc(firebase.auth().currentUser.uid).collection(\"userPosts\").add({\n      downloadURL: downloadURL,\n      caption: caption,\n      creation: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      props.navigation.popToTop(\"Feed\");\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: props.route.params.image\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Write a Caption...\",\n    onChangeText: function onChangeText(caption) {\n      return setCaption(caption);\n    }\n  }), React.createElement(Button, {\n    title: \"Save\",\n    onPress: function onPress() {\n      return uploadImage();\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/tayyaba/Desktop/zenkoders/Faizan/Instagram/components/main/Save.js"],"names":["React","useState","firebase","NavigationContainer","require","Save","props","console","log","route","params","image","caption","setCaption","uploadImage","childPath","auth","currentUser","uid","Math","random","toString","uri","fetch","response","blob","task","storage","ref","child","put","taskProgress","snapshot","bytesTransferred","taskCompleted","getDownloadURL","then","savePostData","taskError","on","downloadURL","firestore","collection","doc","add","creation","FieldValue","serverTimestamp","navigation","popToTop","flex"],"mappings":"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","sourcesContent":["import React,{useState} from 'react'\nimport {Text,TextInput,StyleSheet,View,Image,Button} from 'react-native'\n\nimport firebase from 'firebase'\nimport { NavigationContainer } from '@react-navigation/native'\nrequire('firebase/firestore')\nrequire('firebase/firebase-storage')\n\nexport default function Save(props) {\n    console.log(props.route.params.image)\n    const [caption,setCaption] = useState(\"\")\n\n    const uploadImage = async () => {\n        \n        const childPath = `post/${firebase.auth().currentUser.uid}/${Math.random().toString(36)}`;\n        console.log(childPath);\n\n       const uri = props.route.params.image; \n       const response = await fetch(uri)\n       const blob = await response.blob();\n\n       const task = firebase.storage().ref().child(childPath).put(blob);\n\n\n       const taskProgress = snapshot => {\n           console.log(`transferred: ${snapshot.bytesTransferred}`);\n       }\n\n\n       const taskCompleted = () => {\n           task.snapshot.ref.getDownloadURL().then((snapshot)  => {\n               savePostData(snapshot);\n               console.log('Task Completed '+snapshot)\n           })\n       }\n\n       const taskError = snapshot => {\n           //console.log(snapshot)\n           console.log('Task Error is Running')\n       }\n\n\n       task.on(\"state_changed\",taskProgress,taskError,taskCompleted); \n\n\n\n\n\n    }\n\n    const savePostData = (downloadURL) => {\n        firebase.firestore().collection('posts').doc(firebase.auth().currentUser.uid).collection(\"userPosts\").add({\n            downloadURL,\n            caption,\n            creation: firebase.firestore.FieldValue.serverTimestamp()\n            \n        }).then((function () {\n            props.navigation.popToTop(\"Feed\")\n        }))\n    }\n\n    return (\n        <View style={{flex: 1}}>\n\n            <Image source={{uri:props.route.params.image}} />\n\n            <TextInput \n              placeholder= \"Write a Caption...\"\n              onChangeText={(caption) => setCaption(caption) }\n            />\n            \n            <Button title=\"Save\" onPress={() => uploadImage()}/>\n        </View>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}