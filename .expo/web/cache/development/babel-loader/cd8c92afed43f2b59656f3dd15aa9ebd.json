{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE } from \"../constants/index\";\nimport firebase from 'firebase';\nexport function fetchUser() {\n  console.log('Action start');\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      console.log('Snapshot variale', snapshot);\n\n      if (snapshot.exists) {\n        console.log('Now Snapshot Exists', snapshot.data());\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('document does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  console.log('Action start');\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      console.log('Posts', posts);\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        currentUser: snapshot.data()\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/tayyaba/Desktop/zenkoders/Faizan/React_Native/Instagram/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","firebase","fetchUser","console","log","dispatch","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","data","type","fetchUserPosts","orderBy","posts","docs","map","id"],"mappings":";;;;;;AAAA,SAASA,iBAAT,EAA4BC,uBAA5B;AACA,OAAOC,QAAP,MAAqB,UAArB;AAGA,OAAO,SAASC,SAAT,GAAqB;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACG,SAAQ,UAACC,QAAD,EAAe;AACnBJ,IAAAA,QAAQ,CAACK,SAAT,GACCC,UADD,CACY,OADZ,EAECC,GAFD,CAEKP,QAAQ,CAACQ,IAAT,GAAgBC,WAAhB,CAA4BC,GAFjC,EAGCC,GAHD,GAICC,IAJD,CAIM,UAACC,QAAD,EAAe;AAEpBX,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BU,QAA/B;;AACI,UAAIA,QAAQ,CAACC,MAAb,EAAqB;AACfZ,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCU,QAAQ,CAACE,IAAT,EAAlC;AACAX,QAAAA,QAAQ,CAAC;AAACY,UAAAA,IAAI,EAAElB,iBAAP;AAA2BW,UAAAA,WAAW,EAAGI,QAAQ,CAACE,IAAT;AAAzC,SAAD,CAAR;AACL,OAHD,MAGO;AACHb,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACH;AACL,KAbD;AAiBH,GAlBD;AAqBN;AAID,OAAO,SAASc,cAAT,GAA0B;AAC7Bf,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACG,SAAQ,UAACC,QAAD,EAAe;AACnBJ,IAAAA,QAAQ,CAACK,SAAT,GACCC,UADD,CACY,OADZ,EAECC,GAFD,CAEKP,QAAQ,CAACQ,IAAT,GAAgBC,WAAhB,CAA4BC,GAFjC,EAGCJ,UAHD,CAGY,WAHZ,EAICY,OAJD,CAIS,UAJT,EAIoB,KAJpB,EAKCP,GALD,GAMCC,IAND,CAMM,UAACC,QAAD,EAAe;AAEpB,UAAIM,KAAK,GAAGN,QAAQ,CAACO,IAAT,CAAcC,GAAd,CAAkB,UAAAd,GAAG,EAAI;AACjC,YAAMQ,IAAI,GAAGR,GAAG,CAACQ,IAAJ,EAAb;AACA,YAAMO,EAAE,GAAGf,GAAG,CAACe,EAAf;AAEA;AAAQA,UAAAA,EAAE,EAAFA;AAAR,WAAgBP,IAAhB;AACH,OALW,CAAZ;AAMAb,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAsBgB,KAAtB;AACAf,MAAAA,QAAQ,CAAC;AAACY,QAAAA,IAAI,EAAEjB,uBAAP;AAAiCU,QAAAA,WAAW,EAAGI,QAAQ,CAACE,IAAT;AAA/C,OAAD,CAAR;AAWA,KA1BD;AA8BH,GA/BD;AAkCN","sourcesContent":["import { USER_STATE_CHANGE ,USER_POSTS_STATE_CHANGE} from '../constants/index'\nimport firebase from 'firebase'\n\n\nexport function fetchUser() {\n    console.log('Action start')\n       return ((dispatch)  => {\n           firebase.firestore()\n           .collection(\"users\")\n           .doc(firebase.auth().currentUser.uid)\n           .get()\n           .then((snapshot)  => {\n          //    alert(firebase.auth().currentUser.uid);\n            console.log('Snapshot variale',snapshot)\n                if (snapshot.exists) {\n                      console.log('Now Snapshot Exists',snapshot.data())\n                      dispatch({type: USER_STATE_CHANGE , currentUser : snapshot.data()})\n                } else {\n                    console.log('document does not exist')\n                }\n           }\n            )\n\n\n       }\n\n       )\n}\n//---\n\n\nexport function fetchUserPosts() {\n    console.log('Action start')\n       return ((dispatch)  => {\n           firebase.firestore()\n           .collection(\"posts\")\n           .doc(firebase.auth().currentUser.uid)\n           .collection(\"userPosts\")\n           .orderBy(\"creation\",\"asc\")\n           .get()\n           .then((snapshot)  => {\n\n            let posts = snapshot.docs.map(doc => {\n                const data = doc.data();\n                const id = doc.id;\n\n                return {id , ...data}\n            })\n            console.log('Posts' , posts)\n            dispatch({type: USER_POSTS_STATE_CHANGE , currentUser : snapshot.data()})\n\n\n          \n            //console.log('Snapshot variale',snapshot.docs)\n                // if (snapshot.exists) {\n                //       console.log('Now Snapshot Exists',snapshot.data())\n                //       dispatch({type: USER_STATE_CHANGE , currentUser : snapshot.data()})\n                // } else {\n                //     console.log('document does not exist')\n                // }\n           }\n            )\n\n\n       }\n\n       )\n}"]},"metadata":{},"sourceType":"module"}