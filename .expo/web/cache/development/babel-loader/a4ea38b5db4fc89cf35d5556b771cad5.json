{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE } from \"../constants/index\";\nimport firebase from 'firebase';\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      console.log('Snapshot variale', snapshot);\n\n      if (snapshot.exists) {\n        console.log('Now Snapshot Exists', snapshot.data());\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('document does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      console.log('Show Posts', posts);\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      console.log(\"following\", following);\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i]));\n      }\n\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n    });\n  };\n}\nexport function fetchUsersData(uid) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        console.log('Snapshot variale', snapshot);\n\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n          dispatch(fetchUserFollowingPosts(user.uid));\n        } else {\n          console.log('document does not exist');\n        }\n      });\n    }\n  };\n}\nexport function fetchUserFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.query.EP.path.segments[1];\n      console.log(\"uid segment\", uid);\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n      console.log('Show Posts1    ', posts);\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n      console.log(\"getstate\", getState());\n    });\n  };\n}","map":{"version":3,"sources":["/Users/tayyaba/Desktop/zenkoders/Faizan/React_Native/Instagram/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","firebase","fetchUser","dispatch","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","console","log","exists","data","type","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollowing","onSnapshot","following","i","length","fetchUsersData","getState","found","usersState","users","some","el","user","fetchUserFollowingPosts","query","EP","path","segments","find"],"mappings":"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","sourcesContent":["import { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE ,USER_FOLLOWING_STATE_CHANGE,USERS_DATA_STATE_CHANGE,USERS_POSTS_STATE_CHANGE} from '../constants/index'\nimport firebase from 'firebase'\n\n\nexport function fetchUser() {\n    \n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"users\")\n            .doc(firebase.auth().currentUser.uid)\n            .get()\n            .then((snapshot) => {\n                //    alert(firebase.auth().currentUser.uid);\n                console.log('Snapshot variale', snapshot)\n                if (snapshot.exists) {\n                    console.log('Now Snapshot Exists', snapshot.data())\n                    dispatch({ type: USER_STATE_CHANGE, currentUser: snapshot.data() })\n                } else {\n                    console.log('document does not exist')\n                }\n            })\n\n\n    }\n\n    )\n}\n//---\n\n\nexport function fetchUserPosts() {\n     \n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n\n                    return { id, ...data }\n                })\n                console.log('Show Posts', posts)\n                dispatch({ type: USER_POSTS_STATE_CHANGE, posts })\n\n\n\n                 \n            })\n\n\n    }\n\n    )\n}\n\n \n\nexport function fetchUserFollowing() {\n     \n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"following\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userFollowing\")          \n            \n            .onSnapshot((snapshot) => {\n\n                let following = snapshot.docs.map(doc => {  \n                    const id = doc.id;\n\n                    return  id\n                })\n                \n                console.log(\"following\",following)\n                for(var i=0;i<following.length;i++){\n                    dispatch(fetchUsersData(following[i]))\n                }\n                dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following })\n                 \n            })\n    }\n\n    )\n}\nexport function fetchUsersData(uid){\n    return((dispatch,getState)=>{\n\n        const found = getState().usersState.users.some(el => el.uid === uid) ;\n\n\n        if(!found) {\n\n            firebase.firestore()\n            .collection(\"users\")\n            .doc(uid)\n            .get()\n            .then((snapshot) => {\n                //    alert(firebase.auth().currentUser.uid);\n                console.log('Snapshot variale', snapshot)\n                if (snapshot.exists) {\n                    let user = snapshot.data();\n                    user.uid = snapshot.id;\n                    dispatch({ type: USERS_DATA_STATE_CHANGE, user })\n                    dispatch(fetchUserFollowingPosts(user.uid))\n                } else {\n                    console.log('document does not exist')\n                }\n            })\n\n        }\n\n\n    })\n}\n\n\n\nexport function fetchUserFollowingPosts(uid) {\n     \n    return ((dispatch,getState) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                const uid =snapshot.query.EP.path.segments[1];\n                // const uid = snapshot.docs[0].ref.path.split('/')[1];\n\n\n                console.log(\"uid segment\",uid)\n                const user = getState().usersState.users.find(el => el.uid === uid) ;\n\n\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n\n                    return { id, ...data ,user}\n                })\n                console.log('Show Posts1    ', posts)\n                dispatch({ type: USERS_POSTS_STATE_CHANGE, posts,uid })\n\n                console.log(\"getstate\",getState())\n\n                 \n            })\n\n\n    }\n\n    )\n}\n"]},"metadata":{},"sourceType":"module"}